<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>MySel20Proj</groupId>
        <artifactId>MySel20Proj</artifactId>
        <version>1.0</version>
	<properties>
      <!-- Explicitly declaring the source encoding eliminates the following 
         message: -->
      <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
         resources, i.e. build is platform dependent! -->
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

       <!-- JBoss dependency versions -->
       <version.org.jboss.as.plugins.maven.plugin>7.2.Final</version.org.jboss.as.plugins.maven.plugin>
       <version.org.jboss.spec.jboss.javaee.6.0>3.0.0.Final</version.org.jboss.spec.jboss.javaee.6.0>

       <!-- other plugin versions -->
       <version.compiler.plugin>2.3.1</version.compiler.plugin>
       <version.war.plugin>2.1.1</version.war.plugin>

       <!-- maven-compiler-plugin -->
       <maven.compiler.target>1.6</maven.compiler.target>
       <maven.compiler.source>1.6</maven.compiler.source>
   </properties>
        <dependencies>
        	<dependency>
        		<groupId>org.seleniumhq.selenium</groupId>
        		<artifactId>selenium-java</artifactId>
        		<version>3.0.1</version>
        	</dependency>
	      <!-- Import the Common Annotations API (JSR-250), we use provided scope 
	         as the API is included in JBoss AS 7 -->
	      <dependency>
	      	<groupId>javax.inject</groupId>
	      	<artifactId>javax.inject</artifactId>
	      	<version>1.0-PFD-1</version>
	      </dependency>
	      <dependency>
	      	<groupId>javax.servlet</groupId>
	      	<artifactId>javax.servlet-api</artifactId>
	      	<version>3.1.0</version>
	      </dependency>
        </dependencies>
  <build>
      <!-- Set the name of the war, used as the context root when the app 
         is deployed -->
      <finalName>${project.artifactId}</finalName>
      <plugins>
         <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <version>${version.war.plugin}</version>
            <configuration>
               <!-- Java EE 6 doesn't require web.xml, Maven needs to catch 
                  up! -->
               <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
         </plugin>
         <!-- JBoss AS plugin to deploy war -->
         <plugin>
            <groupId>org.jboss.as.plugins</groupId>
            <artifactId>jboss-as-maven-plugin</artifactId>
            <version>${version.org.jboss.as.plugins.maven.plugin}</version>
         </plugin>
         <!-- Compiler plugin enforces Java 1.6 compatibility and activates 
            annotation processors -->
         <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
             <version>${version.compiler.plugin}</version>
             <configuration>
                 <source>${maven.compiler.source}</source>
                 <target>${maven.compiler.target}</target>
            </configuration>
         </plugin>
		<plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-dependency-plugin</artifactId>
	        <version>3.0.2</version>
	        <executions>
	          <execution>
	            <id>copy-dependencies</id>
	            <phase>package</phase>
	            <goals>
	              <goal>copy-dependencies</goal>
	            </goals>
	            <configuration>
	              <outputDirectory>${project.build.directory}/lib</outputDirectory>
	              <overWriteReleases>false</overWriteReleases>
	              <overWriteSnapshots>false</overWriteSnapshots>
	              <overWriteIfNewer>true</overWriteIfNewer>
	            </configuration>
	          </execution>
	        </executions>
	      </plugin>
      </plugins>
   </build>
</project>